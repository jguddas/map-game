import leaflet from 'leaflet'
import 'leaflet/dist/leaflet.css'
import './style.sass'
import euCountries from './eu-countries.json'
import { capitalCities as euCapitals } from './eu-capitals.json'

let current, left, count, marker
icon = leaflet.icon({
  iconUrl: require('./flag.png'),
  iconSize: [32,32],
  iconAnchor: [5, 30],
});

[counter, kmleft, nextCity] = ['counter','kmleft','nextCity','map'].map(id ->
  el = document.createElement('div')
  el.setAttribute('id', id)
  el.setAttribute('class', 'components')
  document.body.appendChild(el)
)

map = leaflet.map('map')
map.createPane('labels')
leaflet.geoJson(euCountries).addTo(map)
map.setView({ lat: 53.54030739150022, lng: 9.843750000000002}, 3)
map.on('click', onClick)

randomCity() ->
  euCapitals.filter(({ capitalCity }) ->
    current?.capitalCity != capitalCity
  )[
    Math.floor(Math.random() * (euCapitals.length - 1))
  ]

info(distance) ->
  counter.textContent = `${count} cities placed`
  if left < 0:
    kmleft.textContent = `Click to restart`
    kmleft.style.cursor = 'pointer'
    nextCity.style.display = 'none'
  else:
    kmleft.textContent = `${left} kilometers left`
    nextCity.textContent = `Select the location of "${current.capitalCity}"`
    nextCity.style.display = 'block'
    kmleft.style.cursor = 'default'

start() ->
  if marker: marker.remove()
  now current = randomCity()
  now left = 1500
  now count = 0
  info()

setMarker({ lat, long }) ->
  if marker: marker.remove()
  now marker = leaflet.marker([lat, long], { icon }).addTo(map)

onClick({ latlng }) ->
  if left <= 0: retrun
  distance = Math.round(getDistance(latlng, current))
  setMarker(current)
  console.log(`You clicked ${distance} kilometers away from ${current.capitalCity}`)
  now current = randomCity()
  now count += 1
  if distance > 50:
    now left -= distance
  info(distance)

getDistance({ lat: lat1, lng: lon1 },{ lat: lat2, long: lon2 }) ->
  deg2rad(deg) ->
    return deg * (Math.PI/180)
  R = 6371 // Radius of the earth in km
  dLat = deg2rad(lat2-lat1) // deg2rad below
  dLon = deg2rad(lon2-lon1)
  a =
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
    Math.sin(dLon/2) * Math.sin(dLon/2)
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  R * c // Distance in km

start()
kmleft.addEventListener('click', -> if left <= 0: start() )
